// Copyright 2022 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

package cmd

import (
	"github.com/spf13/cobra"

	"github.com/hacbs-contract/ec-cli/internal/ecgit"
)

func createPR() *cobra.Command {
	var data = struct {
		componentRepoURL  string
		destinationBranch string
		prBranchName      string
		prTitle           string
		prBody            string
		patchFilePath     string
	}{
		destinationBranch: "main",
		prTitle:           "Enterprise Contract Automated Update",
		prBody:            "This is an automated PR generated by Enterprise Contract",
	}
	cmd := &cobra.Command{
		Use:   "create-pr",
		Short: "Create a PR based on the changes in the specified branch targeting the specified branch",
		Long: `Performs the following:
- Clones the provided repository
- Creates a branch with specified name
- Applies the given patch file
- Adds and commits the given file changes
- Push changes to the remote repository
- Creates a PR for the target branch`,
		Example: `  ec-cli create-automated-pr --repo https://github.com/example/repo --destination-branch main --branch-name <branch name pr is based on> --title <pr title> --body <pr body> --patch <path/to/patch/file>
`,
		RunE: func(cmd *cobra.Command, args []string) error {
			return ecgit.CreateAutomatedPR(cmd.Context(), data.componentRepoURL, data.patchFilePath, data.destinationBranch, data.prBranchName, data.prTitle, data.prBody)
		},
	}
	cmd.Flags().StringVar(&data.componentRepoURL, "repo", data.componentRepoURL, "The URL of the component repo")
	cmd.Flags().StringVar(&data.destinationBranch, "destination-branch", data.destinationBranch, "The branch to create the PR for")
	cmd.Flags().StringVar(&data.prBranchName, "branch-name", data.prBranchName, "Branch to create the PR from")
	cmd.Flags().StringVar(&data.prTitle, "title", data.prTitle, "The title of the PR")
	cmd.Flags().StringVar(&data.prBody, "body", data.prBody, "The body of the PR")
	cmd.Flags().StringVar(&data.patchFilePath, "patch", data.patchFilePath, "The path to the diff file")
	return cmd
}

func init() {
	create := createPR()
	RootCmd.AddCommand(create)
}
