{"_type":"https://in-toto.io/Statement/v0.1","predicateType":"https://slsa.dev/provenance/v0.2","subject":[{"name":"quay.io/zregvart_redhat/spring-petclinic","digest":{"sha256":"4f9ad167969acc05b2f3f8e3b712d64b59d1615e9295ba17044ab0085ec731f6"}}],"predicate":{"builder":{"id":"https://tekton.dev/chains/v2"},"buildType":"https://tekton.dev/attestations/chains/pipelinerun@v2","invocation":{"configSource":{},"parameters":{"dockerfile":"\"Dockerfile\"","git-url":"\"https://github.com/jduimovich/spring-petclinic\"","output-image":"\"quay.io/zregvart_redhat/spring-petclinic:dc80a7f\"","path-context":"\".\"","rebuild":"\"false\"","revision":"\"main\""}},"buildConfig":{"tasks":[{"name":"appstudio-init","ref":{"name":"init","kind":"Task"},"startedOn":"2022-05-31T09:37:18Z","finishedOn":"2022-05-31T09:37:31Z","status":"Succeeded","steps":[{"entryPoint":"#!/bin/bash\necho \"App Studio Build Initialize: $(params.image-url)\"\necho\necho \"Determine if Image Already Exists\"\n# Build the image when image does not exists or rebuild is set to true\nif ! skopeo inspect --no-tags docker://$(params.image-url) \u0026\u003e/dev/null || [ \"$(params.rebuild)\" == \"true\" ]; then\n  echo -n \"true\" \u003e $(results.build.path)\nelse\n  echo -n \"false\" \u003e $(results.build.path)\nfi\n","arguments":null,"environment":{"container":"appstudio-init","image":"registry.access.redhat.com/ubi8/skopeo@sha256:cc58da50c3842f5f2a4ba8781b60f6052919a5555a000cb4eb18a0bd0241b2b3"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"image-url":"\"$(params.output-image)\"","rebuild":"\"$(params.rebuild)\""}},"results":[{"name":"build","value":"true"}]},{"name":"clone-repository","after":["appstudio-init"],"ref":{"name":"git-clone","kind":"Task"},"startedOn":"2022-05-31T09:37:34Z","finishedOn":"2022-05-31T09:37:45Z","status":"Succeeded","steps":[{"entryPoint":"#!/usr/bin/env sh\nset -eu\n\nif [ \"${PARAM_VERBOSE}\" = \"true\" ] ; then\n  set -x\nfi\n\nif [ \"${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials\" \"${PARAM_USER_HOME}/.git-credentials\"\n  cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig\" \"${PARAM_USER_HOME}/.gitconfig\"\n  chmod 400 \"${PARAM_USER_HOME}/.git-credentials\"\n  chmod 400 \"${PARAM_USER_HOME}/.gitconfig\"\nfi\n\nif [ \"${WORKSPACE_SSH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp -R \"${WORKSPACE_SSH_DIRECTORY_PATH}\" \"${PARAM_USER_HOME}\"/.ssh\n  chmod 700 \"${PARAM_USER_HOME}\"/.ssh\n  chmod -R 400 \"${PARAM_USER_HOME}\"/.ssh/*\nfi\n\nCHECKOUT_DIR=\"${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}\"\n\ncleandir() {\n  # Delete any existing contents of the repo directory if it exists.\n  #\n  # We don't just \"rm -rf ${CHECKOUT_DIR}\" because ${CHECKOUT_DIR} might be \"/\"\n  # or the root of a mounted volume.\n  if [ -d \"${CHECKOUT_DIR}\" ] ; then\n    # Delete non-hidden files and directories\n    rm -rf \"${CHECKOUT_DIR:?}\"/*\n    # Delete files and directories starting with . but excluding ..\n    rm -rf \"${CHECKOUT_DIR}\"/.[!.]*\n    # Delete files and directories starting with .. plus any other character\n    rm -rf \"${CHECKOUT_DIR}\"/..?*\n  fi\n}\n\nif [ \"${PARAM_DELETE_EXISTING}\" = \"true\" ] ; then\n  cleandir\nfi\n\ntest -z \"${PARAM_HTTP_PROXY}\" || export HTTP_PROXY=\"${PARAM_HTTP_PROXY}\"\ntest -z \"${PARAM_HTTPS_PROXY}\" || export HTTPS_PROXY=\"${PARAM_HTTPS_PROXY}\"\ntest -z \"${PARAM_NO_PROXY}\" || export NO_PROXY=\"${PARAM_NO_PROXY}\"\n\n/ko-app/git-init \\\n  -url=\"${PARAM_URL}\" \\\n  -revision=\"${PARAM_REVISION}\" \\\n  -refspec=\"${PARAM_REFSPEC}\" \\\n  -path=\"${CHECKOUT_DIR}\" \\\n  -sslVerify=\"${PARAM_SSL_VERIFY}\" \\\n  -submodules=\"${PARAM_SUBMODULES}\" \\\n  -depth=\"${PARAM_DEPTH}\" \\\n  -sparseCheckoutDirectories=\"${PARAM_SPARSE_CHECKOUT_DIRECTORIES}\"\ncd \"${CHECKOUT_DIR}\"\nRESULT_SHA=\"$(git rev-parse HEAD)\"\nEXIT_CODE=\"$?\"\nif [ \"${EXIT_CODE}\" != 0 ] ; then\n  exit \"${EXIT_CODE}\"\nfi\nprintf \"%s\" \"${RESULT_SHA}\" \u003e \"$(results.commit.path)\"\nprintf \"%s\" \"${PARAM_URL}\" \u003e \"$(results.url.path)\"\n","arguments":null,"environment":{"container":"clone","image":"registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:af7dd5b3b1598a980f17d5f5d3d8a4b11ab4f5184677f7f17ad302baa36bd3c1"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"deleteExisting":"\"true\"","depth":"\"1\"","gitInitImage":"\"registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:af7dd5b3b1598a980f17d5f5d3d8a4b11ab4f5184677f7f17ad302baa36bd3c1\"","httpProxy":"\"\"","httpsProxy":"\"\"","noProxy":"\"\"","refspec":"\"\"","revision":"\"$(params.revision)\"","sparseCheckoutDirectories":"\"\"","sslVerify":"\"true\"","subdirectory":"\"\"","submodules":"\"true\"","url":"\"$(params.git-url)\"","userHome":"\"/tekton/home\"","verbose":"\"true\""}},"results":[{"name":"commit","value":"dc80a7f4b6693864bf0aa459c9a57efdb57fba84"},{"name":"url","value":"https://github.com/jduimovich/spring-petclinic"}]},{"name":"appstudio-configure-build","after":["clone-repository"],"ref":{"name":"configure-build","kind":"Task"},"startedOn":"2022-05-31T09:37:47Z","finishedOn":"2022-05-31T09:37:55Z","status":"Succeeded","steps":[{"entryPoint":"#!/usr/bin/env bash\necho \"App Studio Configure Build\"\n\nDEST=/workspace/source/.dockerconfigjson\nDEF=/secret/default-push-secret/.dockerconfigjson\nAUTH=/workspace/registry-auth/.dockerconfigjson\nTMP=$(mktemp)\necho '{}' \u003e $DEST\n# Set lowest priority on default shared secret\nFILES=\"$DEF\"\n# Use secrets from serviceAccount\ncd /tekton/creds-secrets\nfor file in $(ls); do\n  if [ -f \"$file/.dockerconfigjson\" ]; then\n    FILES=\"$FILES $file/.dockerconfigjson\"\n  elif [ -f \"$file/.dockercfg\" ]; then\n    # convert format from .dockercfg to .dockerconfigjson\n    newformat=$(mktemp)\n    jq '{\"auths\": .}' $file/.dockercfg \u003e $newformat\n    FILES=\"$FILES $newformat\"\n  fi\ndone\n# set highest priority on registry-auth workspace\nFILES=\"$FILES $AUTH\"\necho \"Looking for Registry Auth Configs\"\n# Merge secrets into one file\nfor file in $FILES; do\n  if [ -f \"$file\" ]; then\n    echo \"$file found\"\n    jq -M -s '.[0] * .[1]' $DEST $file \u003e $TMP\n    mv $TMP $DEST\n  fi\ndone\necho -n $DEST \u003e /tekton/results/registry-auth\necho -n \"--authfile $DEST\"  \u003e  /tekton/results/buildah-auth-param\n","arguments":null,"environment":{"container":"appstudio-configure-build","image":"quay.io/redhat-appstudio/appstudio-utils@sha256:e1d7e2bbff7032f078df41ab4d6345ada8474f615c0e93f6268ae9ba48a81b1d"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"shared-secret":"\"redhat-appstudio-user-workload\""}},"results":[{"name":"buildah-auth-param","value":"--authfile /workspace/source/.dockerconfigjson"},{"name":"registry-auth","value":"/workspace/source/.dockerconfigjson"}]},{"name":"build-container","after":["appstudio-configure-build"],"ref":{"name":"s2i-java","kind":"Task"},"startedOn":"2022-05-31T09:37:58Z","finishedOn":"2022-05-31T09:43:51Z","status":"Succeeded","steps":[{"entryPoint":"/bin/sh -c","arguments":["echo \"MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)\" \u003e env-file\n\n[[ '$(params.MAVEN_ARGS_APPEND)' != \"\" ]] \u0026\u0026\n  echo \"MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)\" \u003e\u003e env-file\n\n[[ '$(params.MAVEN_MIRROR_URL)' != \"\" ]] \u0026\u0026\n  echo \"MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)\" \u003e\u003e env-file\n\necho \"Generated Env file\"\necho \"------------------------------\"\ncat env-file\necho \"------------------------------\""],"environment":{"container":"gen-env-file","image":"registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:637c15600359cb45bc01445b5e811b6240ca239f0ebfe406b50146e34f68f631"},"annotations":null},{"entryPoint":"s2i build $(params.PATH_CONTEXT) image-registry.openshift-image-registry.svc:5000/openshift/java:$(params.VERSION) --image-scripts-url image:///usr/local/s2i --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-params/env-file","arguments":null,"environment":{"container":"generate","image":"registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:cd4996fba88519ec21499da63d8c3e26cc4552429b949da76914d0666c27872d"},"annotations":null},{"entryPoint":"buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --layers -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .","arguments":null,"environment":{"container":"build","image":"registry.access.redhat.com/ubi8/buildah@sha256:31f84b19a0774be7cfad751be38fc97f5e86cefd26e0abaec8047ddc650b00bf"},"annotations":null},{"entryPoint":"buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) --digestfile=$(workspaces.source.path)/image-digest $(params.PUSH_EXTRA_ARGS) $(params.IMAGE) docker://$(params.IMAGE)\n","arguments":null,"environment":{"container":"push","image":"registry.access.redhat.com/ubi8/buildah@sha256:31f84b19a0774be7cfad751be38fc97f5e86cefd26e0abaec8047ddc650b00bf"},"annotations":null},{"entryPoint":"cat \"$(workspaces.source.path)\"/image-digest | tee $(results.IMAGE_DIGEST.path)\necho \"$(params.IMAGE)\" | tee $(results.IMAGE_URL.path)\n","arguments":null,"environment":{"container":"digest-to-results","image":"registry.access.redhat.com/ubi8/buildah@sha256:31f84b19a0774be7cfad751be38fc97f5e86cefd26e0abaec8047ddc650b00bf"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"BUILDER_IMAGE":"\"registry.access.redhat.com/ubi8/buildah@sha256:31f84b19a0774be7cfad751be38fc97f5e86cefd26e0abaec8047ddc650b00bf\"","IMAGE":"\"$(params.output-image)\"","MAVEN_ARGS_APPEND":"\"\"","MAVEN_CLEAR_REPO":"\"false\"","MAVEN_MIRROR_URL":"\"\"","PATH_CONTEXT":"\"$(params.path-context)\"","PUSH_EXTRA_ARGS":"\"$(tasks.appstudio-configure-build.results.buildah-auth-param)\"","TLSVERIFY":"\"true\"","VERSION":"\"openjdk-11-ubi8\""}},"results":[{"name":"IMAGE_DIGEST","value":"sha256:4f9ad167969acc05b2f3f8e3b712d64b59d1615e9295ba17044ab0085ec731f6"},{"name":"IMAGE_URL","value":"quay.io/zregvart_redhat/spring-petclinic:dc80a7f\n"}]},{"name":"sanity-inspect-image","after":["build-container"],"ref":{"name":"sanity-inspect-image","kind":"Task"},"startedOn":"2022-05-31T09:43:52Z","finishedOn":"2022-05-31T09:44:21Z","status":"Succeeded","steps":[{"entryPoint":"IMAGE_INSPECT=image_inspect.json\nBASE_IMAGE_INSPECT=base_image_inspect.json\nRAW_IMAGE_INSPECT=raw_image_inspect.json\n\necho \"Inspecting manifest for source image $(params.IMAGE_URL)\"\nskopeo inspect --no-tags docker://$(params.IMAGE_URL) \u003e $IMAGE_INSPECT\nskopeo inspect --no-tags --raw docker://$(params.IMAGE_URL) \u003e $RAW_IMAGE_INSPECT\n\necho \"Getting base image manifest for source image $(params.IMAGE_URL)\"\nBASE_IMAGE_NAME=\"$(jq -r \".annotations.\\\"org.opencontainers.image.base.name\\\"\" $RAW_IMAGE_INSPECT)\"\nBASE_IMAGE_DIGEST=\"$(jq -r \".annotations.\\\"org.opencontainers.image.base.digest\\\"\" $RAW_IMAGE_INSPECT)\"\nif [ $BASE_IMAGE_NAME == 'null' ]; then\n  echo \"Cannot get base image info from 'annotations'\"\n  echo \"Trying to get base image info from 'Labels'\"\n  BASE_IMAGE_NAME=\"$(jq -r \".Labels.\\\"org.opencontainers.image.base.name\\\"\" $IMAGE_INSPECT)\"\n  BASE_IMAGE_DIGEST=\"$(jq -r \".annotations.\\\"org.opencontainers.image.base.digest\\\"\" $IMAGE_INSPECT)\"\n  if [ \"$BASE_IMAGE_NAME\" == 'null' ]; then\n    echo \"Cannot get base image info from 'Labels', please check the source image $(params.IMAGE_URL)\"\n    exit 0\n  fi\nfi\nif [ -z \"$BASE_IMAGE_NAME\" ]; then\n  echo \"Source image $(params.IMAGE_URL) is built from scratch, so there is no base image\"\n  exit 0\nfi\nBASE_IMAGE=\"${BASE_IMAGE_NAME%:*}@$BASE_IMAGE_DIGEST\"\necho \"The base image is $BASE_IMAGE, get its manifest now\"\nskopeo inspect --no-tags docker://$BASE_IMAGE  \u003e $BASE_IMAGE_INSPECT || true\necho \"$BASE_IMAGE\" | tee $(results.BASE_IMAGE.path)\n","arguments":null,"environment":{"container":"inspect-image","image":"quay.io/redhat-appstudio/hacbs-test@sha256:5f21903cd1f1e0105692263b96967fa36b82135bf334ba0965d7c9cba38c4840"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"IMAGE_URL":"\"$(params.output-image)\""}},"results":[{"name":"BASE_IMAGE","value":"image-registry.openshift-image-registry.svc:5000/openshift/java@sha256:e7f848dcb7499578239a4353bf5de2107bad5f22604346a2f9bfd39ddbf5d1c6\n"}]},{"name":"sanity-label-check","after":["sanity-inspect-image"],"ref":{"name":"sanity-label-check","kind":"Task"},"startedOn":"2022-05-31T09:44:22Z","finishedOn":"2022-05-31T09:44:35Z","status":"Succeeded","steps":[{"entryPoint":"CONFTEST_OPTIONS=\"\"\nif [ -s \"../sanity-inspect-image/base_image_inspect.json\" ]; then\n  CONFTEST_OPTIONS=\"-d=../sanity-inspect-image/base_image_inspect.json\"\nfi\n\necho \"Running conftest using $(params.POLICY_DIR) policy, $(params.POLICY_NAMESPACE) namespace\"\n/usr/bin/conftest test --no-fail ../sanity-inspect-image/image_inspect.json \"${CONFTEST_OPTIONS}\" \\\n--policy $(params.POLICY_DIR) --namespace $(params.POLICY_NAMESPACE) \\\n--output=json 2\u003e stderr.txt | tee sanity_label_check_output.json\n\nERR_MSG=\"$(cat stderr.txt)\"\nERR_MSG=\"${ERR_MSG:-unknown}\"\nHACBS_ERROR_OUTPUT=$(jq -rc --arg date $(date +%s) --arg ERR_MSG \"${ERR_MSG: 0: 3000}\" --null-input \\\n  '{result: \"ERROR\", timestamp: $date, failures: [$ERR_MSG]}')\nHACBS_TEST_OUTPUT=$(jq -rce --arg date $(date +%s) \\\n  '.[] | { result: (if (.failures | length \u003e 0) then \"FAILURE\" else \"SUCCESS\" end),\n           timestamp: $date,\n           namespace,\n           successes,\n           failures: (.failures // [])|map(.metadata.details.name)\n         }' sanity_label_check_output.json || true)\necho \"${HACBS_TEST_OUTPUT:-${HACBS_ERROR_OUTPUT}}\" | tee $(results.HACBS_TEST_OUTPUT.path)\n","arguments":null,"environment":{"container":"basic-sanity-checks-required-labels","image":"quay.io/redhat-appstudio/hacbs-test@sha256:581f9e27c748f9900e32a152293b6dffbaa3e390775f3c36c3860c6ed6c87b73"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"POLICY_DIR":"\"/project/image/\"","POLICY_NAMESPACE":"\"required_checks\""}},"results":[{"name":"HACBS_TEST_OUTPUT","value":"{\"result\":\"SUCCESS\",\"timestamp\":\"1653990273\",\"namespace\":\"required_checks\",\"successes\":22,\"failures\":[]}\n"}]},{"name":"sanity-optional-label-check","after":["sanity-inspect-image"],"ref":{"name":"sanity-label-check","kind":"Task"},"startedOn":"2022-05-31T09:44:22Z","finishedOn":"2022-05-31T09:44:36Z","status":"Succeeded","steps":[{"entryPoint":"CONFTEST_OPTIONS=\"\"\nif [ -s \"../sanity-inspect-image/base_image_inspect.json\" ]; then\n  CONFTEST_OPTIONS=\"-d=../sanity-inspect-image/base_image_inspect.json\"\nfi\n\necho \"Running conftest using $(params.POLICY_DIR) policy, $(params.POLICY_NAMESPACE) namespace\"\n/usr/bin/conftest test --no-fail ../sanity-inspect-image/image_inspect.json \"${CONFTEST_OPTIONS}\" \\\n--policy $(params.POLICY_DIR) --namespace $(params.POLICY_NAMESPACE) \\\n--output=json 2\u003e stderr.txt | tee sanity_label_check_output.json\n\nERR_MSG=\"$(cat stderr.txt)\"\nERR_MSG=\"${ERR_MSG:-unknown}\"\nHACBS_ERROR_OUTPUT=$(jq -rc --arg date $(date +%s) --arg ERR_MSG \"${ERR_MSG: 0: 3000}\" --null-input \\\n  '{result: \"ERROR\", timestamp: $date, failures: [$ERR_MSG]}')\nHACBS_TEST_OUTPUT=$(jq -rce --arg date $(date +%s) \\\n  '.[] | { result: (if (.failures | length \u003e 0) then \"FAILURE\" else \"SUCCESS\" end),\n           timestamp: $date,\n           namespace,\n           successes,\n           failures: (.failures // [])|map(.metadata.details.name)\n         }' sanity_label_check_output.json || true)\necho \"${HACBS_TEST_OUTPUT:-${HACBS_ERROR_OUTPUT}}\" | tee $(results.HACBS_TEST_OUTPUT.path)\n","arguments":null,"environment":{"container":"basic-sanity-checks-required-labels","image":"quay.io/redhat-appstudio/hacbs-test@sha256:581f9e27c748f9900e32a152293b6dffbaa3e390775f3c36c3860c6ed6c87b73"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"POLICY_DIR":"\"/project/image/\"","POLICY_NAMESPACE":"\"optional_checks\""}},"results":[{"name":"HACBS_TEST_OUTPUT","value":"{\"result\":\"SUCCESS\",\"timestamp\":\"1653990275\",\"namespace\":\"optional_checks\",\"successes\":7,\"failures\":[]}\n"}]},{"name":"get-clair-results","after":["build-container"],"ref":{"name":"get-clair-scan","kind":"Task"},"startedOn":"2022-05-31T09:43:53Z","finishedOn":"2022-05-31T09:44:18Z","status":"Succeeded","steps":[{"entryPoint":"#!/usr/bin/env bash\ntemp='$(params.SHA)'\nmodifiedSha=${temp//:/%3A}\n\n#ugly safety mechanism - need to be improved in future, bleh :(\n\nfunction safety_mechanism {\n\n#curl request\nhttp_code=$(curl -o $(workspaces.clair-ws.path)/clair-result.json -w '%{http_code}' -H \"Content-type: application/json\" -XGET https://quay.io/api/v1/repository/$(echo '$(params.PULLSPEC)' | sed \"s/\\(.*\\):.*/\\1/\" | sed \"s/^[^/]*\\///\")/manifest/$modifiedSha/security?vulnerabilities=true)\nscan_file=$(workspaces.clair-ws.path)/clair-result.json\n\nif [[ \"$http_code\" != \"200\" ]]\nthen\n  echo \"Error, response code is not 200. Response code: $http_code\"\n  echo \"Body of response: $(cat $scan_file)\"\n  rm -f $scan_file\n  exit 0\nfi\n\n#scan_file logic\nif [[ ($(jq '.data' $scan_file) == null) ]]\nthen\n  retval=1\nelse\n  retval=0\nfi\nreturn $retval\n}\n\nretval=$(safety_mechanism)\n\nfunction retry {\n  local n=0\n  local max=5\n  # TODO Clair scan time varies too much at the moment, from 10 minutes to +5 hours. Decreasing delay.\n  #local delay=60\n  local delay=0\n  while true; do\n    \"$@\" \u0026\u0026 [ \"$retval\"==0 ]  \u0026\u0026 break || {\n      if [[ $n -lt $max ]]; then\n        let n++\n        echo \"Getting clair scan failed, because data were: $(jq '.data' $scan_file). Attempt $n/$max\"\n        sleep $delay;\n      else\n        echo \"The clair scan has status $(jq '.status' $scan_file) and was not obtained in $n attempts.\"\n        rm -f $scan_file\n        exit 0\n      fi\n    }\n  done\n}\n\nretry safety_mechanism\n","arguments":null,"environment":{"container":"get-vulnerabilities","image":"quay.io/redhat-appstudio/hacbs-test@sha256:581f9e27c748f9900e32a152293b6dffbaa3e390775f3c36c3860c6ed6c87b73"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"PULLSPEC":"\"$(params.output-image)\"","SHA":"\"$(tasks.build-container.results.IMAGE_DIGEST)\""}}},{"name":"conftest-clair","after":["get-clair-results"],"ref":{"name":"conftest-clair","kind":"Task"},"startedOn":"2022-05-31T09:44:18Z","finishedOn":"2022-05-31T09:44:35Z","status":"Succeeded","steps":[{"entryPoint":"/usr/bin/conftest test --no-fail $(workspaces.conftest-ws.path)/clair-result.json \\\n--policy /project/clair/vulnerabilities-check.rego --namespace required_checks \\\n--output=json | tee $(workspaces.conftest-ws.path)/clair-vulnerabilities.json\n","arguments":null,"environment":{"container":"conftest-vulnerabilities","image":"quay.io/redhat-appstudio/hacbs-test@sha256:581f9e27c748f9900e32a152293b6dffbaa3e390775f3c36c3860c6ed6c87b73"},"annotations":null},{"entryPoint":"HACBS_ERROR_OUTPUT=$(jq -rc --arg date $(date +%s) --null-input \\\n  '{result: \"ERROR\", timestamp: $date}')\nHACBS_TEST_OUTPUT=$(jq -rce --arg date $(date +%s) \\\n  '.[] | { result: (if (.failures | length \u003e 0) then \"FAILURE\" else \"SUCCESS\" end),\n           timestamp: $date,\n           namespace,\n           successes,\n           failures: (.failures // [])|map(.metadata.details.name)\n         }' $(workspaces.conftest-ws.path)/clair-vulnerabilities.json || true)\necho \"${HACBS_TEST_OUTPUT:-${HACBS_ERROR_OUTPUT}}\" | tee $(results.HACBS_TEST_OUTPUT.path)\n","arguments":null,"environment":{"container":"test-format-result","image":"quay.io/redhat-appstudio/hacbs-test@sha256:581f9e27c748f9900e32a152293b6dffbaa3e390775f3c36c3860c6ed6c87b73"},"annotations":null}],"invocation":{"configSource":{},"parameters":{}},"results":[{"name":"HACBS_TEST_OUTPUT","value":"{\"result\":\"ERROR\",\"timestamp\":\"1653990274\"}\n"}]},{"name":"sast-go","after":["build-container"],"ref":{"name":"sast-go","kind":"Task"},"startedOn":"2022-05-31T09:43:53Z","finishedOn":"2022-05-31T09:44:10Z","status":"Succeeded","steps":[{"entryPoint":"/usr/local/go/bin/gosec -no-fail -fmt=sarif -out=gosec_output.json $(workspaces.workspace.path)/... | tee gosec_output.txt\n\n# Test if any package was found\n# Even with -no-fail, gosec uses exit code 1 for several states,\n# including when there are no packages found.\ngrep \"No packages found$\" gosec_output.txt \u0026\u0026 echo \"Skipping because no Go packages were found\"\n\nHACBS_ERROR_OUTPUT=$(jq -rc --arg date $(date +%s) --null-input \\\n  '{result: \"ERROR\", timestamp: $date}')\n\nif [ -f gosec_output.json ];\nthen\n  HACBS_TEST_OUTPUT=$(jq -rce --arg date $(date +%s) \\\n    '{ result: (if (.runs[].results | length \u003e 0) then \"FAILURE\" else \"SUCCESS\" end),\n       timestamp: $date,\n       namespace: \"default\",\n       successes: 0,\n       failures: (.runs[].results // [])|map(.message.text)\n     }' gosec_output.json || true)\nelse\n  HACBS_TEST_OUTPUT=$(jq -rc --arg date $(date +%s) --null-input \\\n    '{ result: \"SUCCESS\",\n       timestamp: $date,\n       namespace: \"default\",\n       successes: 0,\n       failures: 0\n     }')\nfi\n\necho \"${HACBS_TEST_OUTPUT:-${HACBS_ERROR_OUTPUT}}\" | tee $(results.HACBS_TEST_OUTPUT.path)\n","arguments":null,"environment":{"container":"sast-go","image":"quay.io/redhat-appstudio/hacbs-test@sha256:dcffec734efe55096f1469bf444d8beea6dc00c80433f3f2018e9ce6a1fc5cfe"},"annotations":null}],"invocation":{"configSource":{},"parameters":{}},"results":[{"name":"HACBS_TEST_OUTPUT","value":"{\"result\":\"SUCCESS\",\"timestamp\":\"1653990249\",\"namespace\":\"default\",\"successes\":0,\"failures\":0}\n"}]},{"name":"show-summary","after":["sast-go"],"ref":{"name":"summary","kind":"Task"},"startedOn":"2022-05-31T09:44:36Z","finishedOn":"2022-05-31T09:44:48Z","status":"Succeeded","steps":[{"entryPoint":"#!/usr/bin/env bash\necho\necho \"App Studio Build Summary:\"\necho\necho \"Build repository: $(params.git-url)\"\necho \"Generated Image is in : $(params.image-url)\"\necho\noc annotate pipelinerun $(params.pipeline-run-name) build.appstudio.openshift.io/repo=$(params.git-url)\noc annotate pipelinerun $(params.pipeline-run-name) build.appstudio.openshift.io/image=$(params.image-url)\n\necho \"Output is in the following annotations:\"\n\necho \"Build Repo is in 'build.appstudio.openshift.io/repo' \"\necho 'oc get pr $(params.pipeline-run-name) -o jsonpath=\"{.metadata.annotations.build\\.appstudio\\.openshift\\.io/repo}\"'\n\necho \"Build Image is in 'build.appstudio.openshift.io/image' \"\necho 'oc get pr $(params.pipeline-run-name) -o jsonpath=\"{.metadata.annotations.build\\.appstudio\\.openshift\\.io/image}\"'\n\necho End Summary\n","arguments":null,"environment":{"container":"appstudio-summary","image":"registry.redhat.io/openshift4/ose-cli@sha256:9a1ca7a36cfdd6c69398b35a7311db662ca7c652e6e8bd440a6331c12f89703a"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"git-url":"\"$(params.git-url)\"","image-url":"\"$(params.output-image)\"","pipeline-run-name":"\"$(context.pipelineRun.name)\""}}},{"name":"hacbs-test-evaluation","after":["sast-go"],"ref":{"name":"hacbs-test-evaluation","kind":"Task"},"startedOn":"2022-05-31T09:44:36Z","finishedOn":"2022-05-31T09:44:47Z","status":"Succeeded","steps":[{"entryPoint":"#!/usr/bin/env bash\n\n# sanity-label-check required checks\nFAILURES=$(jq '.[] | .failures // {} | .[] | .msg' sanity-label-check-required_checks/sanity_label_check_output.json)\nif [ -n \"$FAILURES\" ]; then\n  echo sanity-label-check-required_checks test FAIL:\n  echo \"$FAILURES\"\nelse\n  echo sanity-label-check-required_checks test PASS\nfi\necho -------------\n\n# sanity-label-check optional checks\nFAILURES=$(jq '.[] | .failures // {} | .[] | .msg' sanity-label-check-optional_checks/sanity_label_check_output.json)\nif [ -n \"$FAILURES\" ]; then\n  echo sanity-label-check-optional_checks test FAIL:\n  echo \"$FAILURES\"\nelse\n  echo sanity-label-check-optional_checks test PASS\nfi\necho -------------\n\n# sanity-inspect-image\nif [ ! -s sanity-inspect-image/base_image_inspect.json ]; then\n  echo sanity-inspect-image test FAIL\n  echo Unable to inspect base image - $(params.BASE_IMAGE)\nelse\n   echo sanity-inspect-image test PASS\nfi\necho -------------\n","arguments":null,"environment":{"container":"summary","image":"quay.io/redhat-appstudio/hacbs-test@sha256:581f9e27c748f9900e32a152293b6dffbaa3e390775f3c36c3860c6ed6c87b73"},"annotations":null}],"invocation":{"configSource":{},"parameters":{"BASE_IMAGE":"\"$(tasks.sanity-inspect-image.results.BASE_IMAGE)\""}}}]},"metadata":{"buildStartedOn":"2022-05-31T09:37:18Z","buildFinishedOn":"2022-05-31T09:44:48Z","completeness":{"parameters":false,"environment":false,"materials":false},"reproducible":false},"materials":[{"uri":"git+.git","digest":{"sha1":""}}]}}
